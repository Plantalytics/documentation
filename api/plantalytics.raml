#%RAML 0.8
title: Plantalytics API
baseUri: http://104.197.35.232:8000/
version: v1
mediaType: application/json


/health_check:
  description: A simple endpoint to indicate that the backend is operational.
  get:
    responses:
      200:
        body:
          application/json:
            example: !include responses/health_check-200.json

/hub_data:
  description: Stores data supplied by a hub into the database.
  post:
    body:
      application/json:
        schema: !include schemas/hub_data.schema.json
        example: !include requests/hub_data.json
    responses:
      200:
        body:
          application/json:
            example: !include generic/err_empty.json
      400:
        body:
          application/json:
            example: !include generic/err_unknown.json
      403:
        body:
          application/json:
            example: !include responses/hub_data-403.json
  put:
    description: Same as POST.


/login:
  description: Verifies a user's credentials and supplies them with an authentication token. Also retrieves the vineyards they are authorized to view.
  post:
    body:
      application/json:
        schema: !include schemas/login.schema.json
        example: !include requests/login.json
    responses:
      200:
        body:
          application/json:
            example: !include responses/login-200.json
      403:
        body:
          application/json:
            example: !include responses/login-403.json

/env_data:
  description: Retrieves most recent environmental data.
  post:
    body:
      application/json:
        schema: !include schemas/env_data.schema.json
        example: !include requests/env_data.json
    responses:
      200:
        body:
          application/json:
            example: !include responses/env_data-200.json
      400:
        body:
          application/json:
            example: !include generic/err_unknown.json
      403:
        body:
          application/json:
            example: !include generic/err_auth.json

/vineyard:
  description: Retrieves the center point and boundary points of an existing vineyard.
  post:
    body:
      application/json:
        schema: !include schemas/vineyard.schema.json
        example: !include requests/vineyard.json
    responses:
      200:
        body:
          application/json:
            example: !include responses/vineyard-200.json
      400:
        body:
          application/json:
            example: !include responses/vineyard-400.json
      403:
        body:
          application/json:
            example: !include generic/err_auth.json

/password:
  /change:
    description: 'Changes the password for an existing user.
                 There are 3 use cases anticipated:
                 1) The current user is logged in and trying to change their own password.
                    a) An "old" password, new "password" and a valid "auth_token" must be given. 
                    b) The "token" and "username" are ignored.
                 2) The current user is the administrator. 
                    a) The admin''s valid "auth_token", the "username", and the new "password" must be supplied. 
                    b) "old" and "token" are ignored.
                 3) The user forgot the password and has used the /reset endpoint below.
                    a) A "username" must be specified and a matching password reset "token" must be given, as well as a new "password"
                    b) The "old" and "auth_token" will be ignored.'
    post:
      body:
        application/json:
          schema: !include schemas/password/change.schema.json
          example: !include requests/password/change.json
      responses:
        200:
          body:
            application/json:
              example: !include generic/err_empty.json
        400:
          body:
            application/json:
              example: !include responses/password/change-400.json
        403:
          body:
            application/json:
              example: !include responses/password/change-403.json

  /reset:
    description: Generates a reset password token and sends email to user's stored address.
                 Request a password reset email for submitted username. Password will not be changed at the time of request, it will simply generate a password reset token and dispatch an email to the user, allowing the user to continue the process.
    post:
      body:
        application/json:
          schema: !include schemas/password/reset.schema.json
          example: !include requests/password/reset.json
      responses:
        200:
          body:
            application/json:
              example: !include generic/err_empty.json
        403:
          body:
            application/json:
              example: !include responses/password/reset-403.json

/email_change:
  description: Changes the email address in the database of an existing (currently logged in) user.
  post:
      body:
        application/json:
          schema: !include schemas/email_change.schema.json
          example: !include requests/email_change.json
      responses:
        200:
          body:
            application/json:
              example: !include generic/err_empty.json
        400:
          body:
            application/json:
              example: !include responses/email_change-400.json
        403:
          body:
            application/json:
              example: !include responses/email_change-403.json

/admin:
  /user:
    description: Retrieves user information.
    post:
      body:
        application/json:
          schema: !include schemas/admin/user.schema.json
          example: !include requests/admin/user.json
      responses:
        200:
          body:
            application/json:
              example: !include responses/admin/user-200.json
        403:
          body:
            application/json:
              example: !include responses/admin/user-403.json

    /new:
      description: Creates a new user in the database.
      post:
        body:
          application/json:
            schema: !include schemas/admin/user/new.schema.json
            example: !include requests/admin/user/new.json
        responses:
          200:
            body:
              application/json:
                example: !include generic/err_empty.json
          403:
            body:
              application/json:
                example: !include responses/admin/err_auth.json
    /edit:
      description: Edits an existing user in the database.
      post:
        body:
          application/json:
            schema: !include schemas/admin/user/edit.schema.json
            example: !include requests/admin/user/edit.json
        responses:
          200:
            body:
              application/json:
                example: !include generic/err_empty.json
          403:
            body:
              application/json:
                example: !include responses/admin/err_auth.json
    /subscription:
      description: Update the subscription end date for a user.
      post:
        body:
          application/json:
            schema: !include schemas/admin/user/subscription.schema.json
            example: !include requests/admin/user/subscription.json
        responses:
          200:
            body:
              application/json:
                example: !include generic/err_empty.json
          403:
            body:
              application/json:
                example: !include responses/admin/err_auth.json
    /disable:
      description: Disables a user. User will no longer be allowed to login, auth tokens will be disabled, but associated data will remain.
      post:
        body:
          application/json:
            schema: !include schemas/admin/user/disable.schema.json
            example: !include requests/admin/user/disable.json
        responses:
          200:
            body:
              application/json:
                example: !include generic/err_empty.json
          403:
            body:
              application/json:
                example: !include responses/admin/err_auth.json

  /vineyard:
    description: Retrieves extra vineyard information like the owner(s) and other authenticated users.
    post:
      body:
        application/json:
          schema: !include schemas/admin/vineyard.schema.json
          example: !include requests/admin/vineyard.json
      responses:
        200:
          body:
            application/json:
              example: !include responses/admin/vineyard-200.json
        403:
          body:
            application/json:
              example: !include responses/admin/err_auth.json

    /new:
      description: Creates a new vineyard in the database.
      post:
        body:
          application/json:
            schema: !include schemas/admin/vineyard/new.schema.json
            example: !include requests/admin/vineyard/new.json
        responses:
          200:
            body:
              application/json:
                example: !include generic/err_empty.json
          403:
            body:
              application/json:
                example: !include responses/admin/err_auth.json
    /edit:
      description: Edits an existing vineyard in the database.
      post:
        body:
          application/json:
            schema: !include schemas/admin/vineyard/edit.schema.json
            example: !include requests/admin/vineyard/edit.json
        responses:
          200:
            body:
              application/json:
                example: !include generic/err_empty.json
          403:
            body:
              application/json:
                example: !include responses/admin/err_auth.json
    /disable:
      description: Disables a vineyard. Vineyard will no longer be accessible but associated data will remain.
      post:
        body:
          application/json:
            schema: !include schemas/admin/vineyard/disable.schema.json
            example: !include requests/admin/vineyard/disable.json
        responses:
          200:
            body:
              application/json:
                example: !include generic/err_empty.json
          403:
            body:
              application/json:
                example: !include responses/admin/err_auth.json
